#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field as _field
from ..schema_config.json_scalar import custom_scalars
from gql_client.runtime.variables import encode_variables
from gql import gql, Client
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, AsyncGenerator, Dict, List, Generator, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin, config


# fmt: off
QUERY: List[str] = ["""
query answer($input: String!, $context: String! = "") {
  callAnswer(input: $input, context: $context) {
    result
  }
}

"""
]


class answer:
    @dataclass(frozen=True)
    class answerData(DataClassJsonMixin):
        @dataclass(frozen=True)
        class AnswerResult(DataClassJsonMixin):
            result: str

        callAnswer: AnswerResult

    # fmt: off
    @classmethod
    def execute(cls, client: Client, input: str, context: str) -> answerData.AnswerResult:
        variables: Dict[str, Any] = {"input": input, "context": context}
        new_variables = encode_variables(variables, custom_scalars)
        response_text = client.execute(
            gql("".join(set(QUERY))), variable_values=new_variables
        )
        res = cls.answerData.from_dict(response_text)
        return res.callAnswer

    # fmt: off
    @classmethod
    async def execute_async(cls, client: Client, input: str, context: str) -> answerData.AnswerResult:
        variables: Dict[str, Any] = {"input": input, "context": context}
        new_variables = encode_variables(variables, custom_scalars)
        response_text = await client.execute_async(
            gql("".join(set(QUERY))), variable_values=new_variables
        )
        res = cls.answerData.from_dict(response_text)
        return res.callAnswer
