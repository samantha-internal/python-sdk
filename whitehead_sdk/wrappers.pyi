from typing import List, Optional, BinaryIO, Dict, Union
from gql.client import Client
from numbers import Number
from .api.sensibility import sensibility as _sensibility
from .api.sentiment import sentiment as _sentiment
from .api.similarity import similarity as _similarity
from .api.topics import topics as _topics
from .api.input.turn import Turn
from .api.enum.relation import Relation

class GraphqlClient(Client):
    def answer(self, input: str, context: str) -> str: ...
    def chitchat(self, input: str, history: List[Dict[str, str]] = []) -> str: ...
    def choose(self, input: str, context: str, choices: List[str] = []) -> str: ...
    def dialogact(self, input: str) -> str: ...
    def paraphrase(self, input: str) -> List[str]: ...
    def relations(self, input: str, relation: Relation) -> List[str]: ...
    def sensibility(
        self, input: List[str] = [], history: List[Turn] = []
    ) -> List[Dict[str, Union[str, Number]]]: ...
    def sentiment(self, input: str) -> List[Dict[str, Union[str, Number]]]: ...
    def similarity(
        self, input: str, candidates: List[str] = []
    ) -> Optional[List[Dict[str, Union[Optional[str], Optional[Number]]]]]: ...
    def speak(self, input: str, output: BinaryIO) -> None: ...
    def topics(
        self,
        input: Optional[str] = None,
        allow_multiple: Optional[bool] = None,
        topics: List[str] = [],
    ) -> List[Dict[str, Union[str, Number]]]: ...
    def transcribe(self, input: BinaryIO) -> str: ...
